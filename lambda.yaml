Parameters:
  ProjectName:
    Description: Nombre del proyecto
    Type: String

  PackageName:
    Description: Nombre del jar
    Type: String

  BucketName:
    Description: Nombre del  bucket
    Type: String

Resources:
    LambdaIMCRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${ProjectName}-LambdaExecutionRole
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Principal:
                    Service:
                      - "lambda.amazonaws.com"
                  Action:
                    - "sts:AssumeRole"
            Path: /
            Policies:
              - PolicyName: !Sub ${ProjectName}-Role-Policy
                PolicyDocument:
                    {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                            "s3:*"
                          ],
                          "Resource": "arn:aws:logs:*:*:*"
                        }
                      ]
                    }

    LambdaIMC:
      Type: AWS::Lambda::Function
      Properties:
        Handler: "com.lambda.gradle.Test::handleRequest"
        Role: !GetAtt LambdaIMCRole.Arn
        Code:
          S3Bucket: !Ref BucketName
          S3Key: !Ref PackageName
        Runtime: "java8"
        Timeout: "25"

    ApiGateway:
        Type: AWS::ApiGateway::RestApi
        Properties:
          Name: !Sub "${ProjectName}-Api"

    ApiGatewayRootMethod:
        Type: AWS::ApiGateway::Method
        Properties:
          AuthorizationType: "NONE"
          HttpMethod: "POST"
          Integration:
            IntegrationHttpMethod: "POST"
            Type: "AWS_PROXY"
            Uri: !Sub
              - "arn:aws:ApiGateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
              - lambdaArn: !GetAtt "LambdaIMC.Arn"
          ResourceId: !GetAtt "ApiGateway.RootResourceId"
          RestApiId: !Ref "ApiGateway"

    ApiGatewayDeployment:
        Type: "AWS::ApiGateway::Deployment"
        DependsOn:
          - "ApiGatewayRootMethod"
        Properties:
          RestApiId: !Ref "ApiGateway"
          StageName: !Ref "ApiGatewayStageName"

    LambdaApiGatewayInvoke:
        Type: "AWS::Lambda::Permission"
        Properties:
          Action: "lambda:InvokeFunction"
          FunctionName: !GetAtt "lambdaFunction.Arn"
          Principal: "ApiGateway.amazonaws.com"
          SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/"
